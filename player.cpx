interface

/**
 * return level state of the given level
 * @param level the number of the level in the current level set
 */
int levelstate(int level);

/**
 * end the current level, either with success or failure
 * @param level
 * @param victory
 * @param time
 */
void finishlevel(int level, int victory, int time);

/**
 * load the player statistics from the scores file
 */
void loadplayerstate();

implementation

uses levelset,configuration;

struct tlevstats
{
	int state;
	int time;
};

map<string,tlevstats> playerstats;

int levelstate(int level)
{
	string lhash=getlevelhash(level);
	tlevstats a=playerstats[lhash];
	return a.state;
}

void updatestats(string lhash, int victory, int time)
{
	if (victory) playerstats[lhash].state=2;
	if (playerstats[lhash].state==0) playerstats[lhash].state=1;
	playerstats[lhash].time+=time;
}

void finishlevel(int level, int victory, int time)
{
	string lhash=getlevelhash(level);
	updatestats(lhash,victory,time);
	FILE *scf=fopen(scoresFile.c_str(),"a");
	if (!scf) return;
	fprintf(scf,"%s %d %d USER\n",lhash.c_str(),victory,time);
	fclose(scf);
}

void loadplayerstate()
{
	int time;
	int victory;
	char hash[128];
	char line[1024];
	FILE *scf=fopen(scoresFile.c_str(),"r");
	if (!scf) return;
	while (!feof(scf))
	{
		fgets(line,999,scf);
		sscanf(line,"%40s %d %d\n",hash,&victory,&time);
		updatestats(hash,victory,time);
		DBG(PLAYERSTATE,"updated :%s: %d %d\n", hash, victory, time);
	}
	fclose(scf);
}
